// <auto-generated />
using System;
using BismillahGraphicsPro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BismillahGraphicsPro.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BismillahGraphicsPro.Data.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.HasKey("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.AccountDeposit", b =>
                {
                    b.Property<int>("AccountDepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountDepositId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.HasKey("AccountDepositId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountDeposit", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.AccountLog", b =>
                {
                    b.Property<int>("AccountLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountLogId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<bool?>("IsAdded")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("date");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AccountLogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("AccountLog", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.AccountWithdraw", b =>
                {
                    b.Property<int>("AccountWithdrawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountWithdrawId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<decimal>("WithdrawAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("WithdrawDate")
                        .HasColumnType("date");

                    b.HasKey("AccountWithdrawId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountWithdraw", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<string>("AdminUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BranchEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BranchPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<byte[]>("InstitutionLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("BranchId");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Expanse", b =>
                {
                    b.Property<int>("ExpanseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpanseId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpanseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExpanseCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpanseDate")
                        .HasColumnType("date");

                    b.Property<string>("ExpanseFor")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("ExpanseId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ExpanseCategoryId");

                    b.ToTable("Expanse", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.ExpanseCategory", b =>
                {
                    b.Property<int>("ExpanseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpanseCategoryId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.HasKey("ExpanseCategoryId");

                    b.HasIndex("BranchId");

                    b.ToTable("ExpanseCategory", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.MeasurementUnit", b =>
                {
                    b.Property<int>("MeasurementUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasurementUnitId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<string>("MeasurementUnitName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("MeasurementUnitId");

                    b.HasIndex("BranchId");

                    b.ToTable("MeasurementUnit", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PageLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"), 1L, 1);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("IconClass")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("Sn")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LinkId");

                    b.HasIndex("LinkCategoryId");

                    b.ToTable("PageLink", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PageLinkAssign", b =>
                {
                    b.Property<int>("LinkAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkAssignId"), 1L, 1);

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("LinkAssignId");

                    b.HasIndex("LinkId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PageLinkAssign", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PageLinkCategory", b =>
                {
                    b.Property<int>("LinkCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkCategoryId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("IconClass")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("Sn")
                        .HasColumnType("int");

                    b.HasKey("LinkCategoryId");

                    b.ToTable("PageLinkCategory", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("BranchId");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("PurchaseDiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("PurchaseDiscountPercentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(38,16)")
                        .HasComputedColumnSql("(case when [PurchaseTotalPrice]=(0) then (0) else round(([PurchaseDiscountAmount]*(100))/[PurchaseTotalPrice],(2)) end)", true);

                    b.Property<decimal?>("PurchaseDueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(20,2)")
                        .HasComputedColumnSql("(round([PurchaseTotalPrice]-([PurchaseDiscountAmount]+[PurchasePaidAmount]),(2)))", true);

                    b.Property<decimal?>("PurchasePaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("PurchaseSn")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchaseTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PurchaseList", b =>
                {
                    b.Property<int>("PurchaseListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseListId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PurchasePrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37,4)")
                        .HasComputedColumnSql("(round([PurchaseQuantity]*[PurchaseUnitPrice],(2)))", true);

                    b.Property<decimal>("PurchaseQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchaseUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseListId");

                    b.HasIndex("BranchId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseList", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PurchasePaymentReceipt", b =>
                {
                    b.Property<int>("PurchaseReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReceiptId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ReceiptSn")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseReceiptId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchasePaymentReceipt", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PurchasePaymentRecord", b =>
                {
                    b.Property<int>("PurchasePaymentRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchasePaymentRecordId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchasePaidDate")
                        .HasColumnType("date");

                    b.Property<int?>("PurchaseReceiptId")
                        .HasColumnType("int");

                    b.HasKey("PurchasePaymentRecordId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchaseReceiptId");

                    b.ToTable("PurchasePaymentRecord", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ps")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PS");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Validation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RegistrationId");

                    b.HasIndex("BranchId");

                    b.ToTable("Registration", (string)null);

                    b.HasData(
                        new
                        {
                            RegistrationId = 1,
                            InsertDateBdTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Authority",
                            Ps = "Admin_121",
                            Type = "Authority",
                            UserName = "Authority"
                        });
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Selling", b =>
                {
                    b.Property<int>("SellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellingId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SellingDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("SellingDiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("SellingDiscountPercentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(38,16)")
                        .HasComputedColumnSql("(case when [SellingTotalPrice]=(0) then (0) else round(([SellingDiscountAmount]*(100))/[SellingTotalPrice],(2)) end)", true);

                    b.Property<decimal?>("SellingDueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(20,2)")
                        .HasComputedColumnSql("(round([SellingTotalPrice]-([SellingDiscountAmount]+[SellingPaidAmount]),(2)))", true);

                    b.Property<decimal?>("SellingPaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("SellingSn")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("SellingId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("Selling", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SellingList", b =>
                {
                    b.Property<int>("SellingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellingListId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(201)
                        .HasColumnType("nvarchar(201)")
                        .HasComputedColumnSql("((CONVERT([nvarchar](100),[Length])+'X')+CONVERT([nvarchar](100),[Width]))", true);

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int>("MeasurementUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellingPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37,4)")
                        .HasComputedColumnSql("(round([SellingQuantity]*[SellingUnitPrice],(2)))", true);

                    b.Property<decimal>("SellingQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("SellingListId");

                    b.HasIndex("BranchId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingList", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SellingPaymentReceipt", b =>
                {
                    b.Property<int>("SellingReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellingReceiptId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("date");

                    b.Property<int>("ReceiptSn")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("SellingReceiptId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("SellingPaymentReceipt", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SellingPaymentRecord", b =>
                {
                    b.Property<int>("SellingPaymentRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellingPaymentRecordId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SellingPaidDate")
                        .HasColumnType("date");

                    b.Property<int?>("SellingReceiptId")
                        .HasColumnType("int");

                    b.HasKey("SellingPaymentRecordId");

                    b.HasIndex("BranchId");

                    b.HasIndex("SellingId");

                    b.HasIndex("SellingReceiptId");

                    b.ToTable("SellingPaymentRecord", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SmsSendRecord", b =>
                {
                    b.Property<int>("SmsSendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmsSendId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SmsProviderSendId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Smscount")
                        .HasColumnType("int")
                        .HasColumnName("SMSCount");

                    b.Property<int>("TextCount")
                        .HasColumnType("int");

                    b.Property<string>("TextSms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TextSMS");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("SmsSendId")
                        .HasName("PK_SMS_Send_Record_1");

                    b.HasIndex("BranchId");

                    b.ToTable("SmsSendRecord", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<string>("SmsNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupplierAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SupplierCompanyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal?>("SupplierDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(20,2)")
                        .HasComputedColumnSql("(round([TotalAmount]-([TotalDiscount]+[SupplierPaid]),(2)))", true);

                    b.Property<string>("SupplierName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("SupplierPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SupplierId");

                    b.HasIndex("BranchId");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDateBdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(dateadd(hour,(6),getutcdate()))");

                    b.Property<string>("SmsNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VendorAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VendorCompanyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal?>("VendorDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(20,2)")
                        .HasComputedColumnSql("(round([TotalAmount]-([TotalDiscount]+[VendorPaid]),(2)))", true);

                    b.Property<string>("VendorName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("VendorPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VendorPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VendorId");

                    b.HasIndex("BranchId");

                    b.ToTable("Vendor", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25205E51-C7F6-43E5-927A-8074AF61B966",
                            ConcurrencyStamp = "25205E51-C7F6-43E5-927A-8074AF61B966",
                            Name = "Authority",
                            NormalizedName = "AUTHORITY"
                        },
                        new
                        {
                            Id = "e202e807-4b4f-4c78-983a-2ad06e3f7012",
                            ConcurrencyStamp = "e202e807-4b4f-4c78-983a-2ad06e3f7012",
                            Name = "AccountCreate",
                            NormalizedName = "ACCOUNTCREATE"
                        },
                        new
                        {
                            Id = "A7B695C1-E8D7-41A9-814F-28BB7EEF32F4",
                            ConcurrencyStamp = "A7B695C1-E8D7-41A9-814F-28BB7EEF32F4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4d4fb0a3-4734-4802-a027-9c9b2ad7dae7",
                            ConcurrencyStamp = "4d4fb0a3-4734-4802-a027-9c9b2ad7dae7",
                            Name = "SubAdmin",
                            NormalizedName = "SUBADMIN"
                        },
                        new
                        {
                            Id = "31f91532-c149-4248-a844-f7601c24b740",
                            ConcurrencyStamp = "31f91532-c149-4248-a844-f7601c24b740",
                            Name = "BalanceSheet",
                            NormalizedName = "BALANCESHEET"
                        },
                        new
                        {
                            Id = "ae25c232-3435-4239-901d-0e2d3e4069c9",
                            ConcurrencyStamp = "ae25c232-3435-4239-901d-0e2d3e4069c9",
                            Name = "Deposit",
                            NormalizedName = "DEPOSIT"
                        },
                        new
                        {
                            Id = "446d16c5-000c-4099-b553-23696a5284ec",
                            ConcurrencyStamp = "446d16c5-000c-4099-b553-23696a5284ec",
                            Name = "Expanse",
                            NormalizedName = "EXPANSE"
                        },
                        new
                        {
                            Id = "b1280e80-8ec6-48fb-8580-6f2e57db8d58",
                            ConcurrencyStamp = "b1280e80-8ec6-48fb-8580-6f2e57db8d58",
                            Name = "ExpenseCategory",
                            NormalizedName = "EXPENSECATEGORY"
                        },
                        new
                        {
                            Id = "22b877e9-56c5-4281-92a7-d336cd4382a4",
                            ConcurrencyStamp = "22b877e9-56c5-4281-92a7-d336cd4382a4",
                            Name = "MeasurementUnit",
                            NormalizedName = "MEASUREMENTUNIT"
                        },
                        new
                        {
                            Id = "3e0d4db7-80a0-49a9-8d8d-116cc5c9fc83",
                            ConcurrencyStamp = "3e0d4db7-80a0-49a9-8d8d-116cc5c9fc83",
                            Name = "NetSummery",
                            NormalizedName = "NETSUMMERY"
                        },
                        new
                        {
                            Id = "897ea03e-f328-4a9e-91bc-247d9dcc6aa9",
                            ConcurrencyStamp = "897ea03e-f328-4a9e-91bc-247d9dcc6aa9",
                            Name = "PaymentSummery",
                            NormalizedName = "PAYMENTSUMMERY"
                        },
                        new
                        {
                            Id = "5a52c2fc-6d6b-478f-9fce-ba46abaea1f2",
                            ConcurrencyStamp = "5a52c2fc-6d6b-478f-9fce-ba46abaea1f2",
                            Name = "Product",
                            NormalizedName = "PRODUCT"
                        },
                        new
                        {
                            Id = "bbd6cebc-741d-4bfb-852b-204d5f623a86",
                            ConcurrencyStamp = "bbd6cebc-741d-4bfb-852b-204d5f623a86",
                            Name = "ProductCategory",
                            NormalizedName = "PRODUCTCATEGORY"
                        },
                        new
                        {
                            Id = "a9c6f8da-3e48-47a9-b355-6107b297ae10",
                            ConcurrencyStamp = "a9c6f8da-3e48-47a9-b355-6107b297ae10",
                            Name = "ProductSummery",
                            NormalizedName = "PRODUCTSUMMERY"
                        },
                        new
                        {
                            Id = "9d037f79-ec3e-481d-8e4f-acf86a3a2f5c",
                            ConcurrencyStamp = "9d037f79-ec3e-481d-8e4f-acf86a3a2f5c",
                            Name = "PurchaseRecord",
                            NormalizedName = "PURCHASERECORD"
                        },
                        new
                        {
                            Id = "bc6a04f9-6984-4755-8573-016047310f8e",
                            ConcurrencyStamp = "bc6a04f9-6984-4755-8573-016047310f8e",
                            Name = "ReportDailyCash",
                            NormalizedName = "REPORTDAILYCASH"
                        },
                        new
                        {
                            Id = "7210cd36-9476-4a49-ad86-f2bfb88c4e6d",
                            ConcurrencyStamp = "7210cd36-9476-4a49-ad86-f2bfb88c4e6d",
                            Name = "ReportExpense",
                            NormalizedName = "REPORTEXPENSE"
                        },
                        new
                        {
                            Id = "93c4b0d6-0d82-410f-adb1-fb4aba413a8e",
                            ConcurrencyStamp = "93c4b0d6-0d82-410f-adb1-fb4aba413a8e",
                            Name = "ReportIncome",
                            NormalizedName = "REPORTINCOME"
                        },
                        new
                        {
                            Id = "aceacd97-893e-464a-9f94-9e19d8984764",
                            ConcurrencyStamp = "aceacd97-893e-464a-9f94-9e19d8984764",
                            Name = "ReportSelling",
                            NormalizedName = "REPORTSELLING"
                        },
                        new
                        {
                            Id = "5c8eda73-94a0-49e6-b4ad-63282d09e3a7",
                            ConcurrencyStamp = "5c8eda73-94a0-49e6-b4ad-63282d09e3a7",
                            Name = "ReportVendor",
                            NormalizedName = "REPORTVENDOR"
                        },
                        new
                        {
                            Id = "27c3d924-cac0-4aae-8076-eb395964d547",
                            ConcurrencyStamp = "27c3d924-cac0-4aae-8076-eb395964d547",
                            Name = "SellingRecord",
                            NormalizedName = "SELLINGRECORD"
                        },
                        new
                        {
                            Id = "5d0106d1-8900-4630-aec2-0b016f55d092",
                            ConcurrencyStamp = "5d0106d1-8900-4630-aec2-0b016f55d092",
                            Name = "Withdraw",
                            NormalizedName = "WITHDRAW"
                        },
                        new
                        {
                            Id = "60482875-1078-4F65-BBBE-5C68836045A6",
                            ConcurrencyStamp = "60482875-1078-4F65-BBBE-5C68836045A6",
                            Name = "TransactionLogs",
                            NormalizedName = "TRANSACTIONLOGS"
                        },
                        new
                        {
                            Id = "D68419DF-4B85-4704-89F7-AC889C750493",
                            ConcurrencyStamp = "D68419DF-4B85-4704-89F7-AC889C750493",
                            Name = "Selling",
                            NormalizedName = "SELLING"
                        },
                        new
                        {
                            Id = "9EB47A31-EFC6-43D4-B204-538FC3F280F3",
                            ConcurrencyStamp = "9EB47A31-EFC6-43D4-B204-538FC3F280F3",
                            Name = "Sms",
                            NormalizedName = "SMS"
                        },
                        new
                        {
                            Id = "D093C085-938C-4A7E-84B8-9CA5559850AE",
                            ConcurrencyStamp = "D093C085-938C-4A7E-84B8-9CA5559850AE",
                            Name = "SubAdminList",
                            NormalizedName = "SUBADMINLIST"
                        },
                        new
                        {
                            Id = "54DAEA5E-86D7-4EBE-9191-A170B37CD883",
                            ConcurrencyStamp = "54DAEA5E-86D7-4EBE-9191-A170B37CD883",
                            Name = "SubAdminPageAccess",
                            NormalizedName = "SUBADMINPAGEACCESS"
                        },
                        new
                        {
                            Id = "86DD9E91-0928-497A-B226-FA346F7EA656",
                            ConcurrencyStamp = "86DD9E91-0928-497A-B226-FA346F7EA656",
                            Name = "SubAdminSignUp",
                            NormalizedName = "SUBADMINSIGNUP"
                        },
                        new
                        {
                            Id = "3DC9AC78-8A93-498A-8D04-D69C0294B4C4",
                            ConcurrencyStamp = "3DC9AC78-8A93-498A-8D04-D69C0294B4C4",
                            Name = "Supplier",
                            NormalizedName = "SUPPLIER"
                        },
                        new
                        {
                            Id = "70453879-6A75-48B8-8ED2-8B86DEC40798",
                            ConcurrencyStamp = "70453879-6A75-48B8-8ED2-8B86DEC40798",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "A0456563-F978-4135-B563-97F23EA02FDA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "A0456563-F978-4135-B563-97F23EA02FDA",
                            Email = "Authority@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "AUTHORITY@GMAIL.COM",
                            NormalizedUserName = "AUTHORITY",
                            PasswordHash = "AQAAAAEAACcQAAAAEDch3arYEB9dCAudNdsYEpVX7ryywa8f3ZIJSVUmEThAI50pLh9RyEu7NjGJccpOog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Authority"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "A0456563-F978-4135-B563-97F23EA02FDA",
                            RoleId = "25205E51-C7F6-43E5-927A-8074AF61B966"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Account", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Accounts")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.AccountDeposit", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Account", "Account")
                        .WithMany("AccountDeposits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AccountDeposit_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.AccountLog", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Account", "Account")
                        .WithMany("AccountLogs")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountLog_Account");

                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("AccountLogs")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountLog_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.Registration", "Registration")
                        .WithMany("AccountLogs")
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountLog_Registration");

                    b.Navigation("Account");

                    b.Navigation("Branch");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.AccountWithdraw", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Account", "Account")
                        .WithMany("AccountWithdraws")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AccountWithdraw_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Expanse", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Account", "Account")
                        .WithMany("Expanses")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Expanse_Account");

                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Expanses")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Expanse_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.ExpanseCategory", "ExpanseCategory")
                        .WithMany("Expanses")
                        .HasForeignKey("ExpanseCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Expanse_ExpanseCategory");

                    b.Navigation("Account");

                    b.Navigation("Branch");

                    b.Navigation("ExpanseCategory");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.ExpanseCategory", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("ExpanseCategories")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_ExpanseCategory_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.MeasurementUnit", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("MeasurementUnits")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_MeasurementUnit_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PageLink", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.PageLinkCategory", "LinkCategory")
                        .WithMany("PageLinks")
                        .HasForeignKey("LinkCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_PageLink_PageLinkCategory");

                    b.Navigation("LinkCategory");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PageLinkAssign", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.PageLink", "Link")
                        .WithMany("PageLinkAssigns")
                        .HasForeignKey("LinkId")
                        .IsRequired()
                        .HasConstraintName("FK_PageLinkAssign_PageLink");

                    b.HasOne("BismillahGraphicsPro.Data.Registration", "Registration")
                        .WithMany("PageLinkAssigns")
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK_PageLinkAssign_Registration");

                    b.Navigation("Link");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Product", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_ProductCategory");

                    b.Navigation("Branch");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.ProductCategory", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("ProductCategories")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Purchase", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Purchases")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchase_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.Registration", "Registration")
                        .WithMany("Purchases")
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchase_Registration");

                    b.HasOne("BismillahGraphicsPro.Data.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_Purchase_Supplier");

                    b.Navigation("Branch");

                    b.Navigation("Registration");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PurchaseList", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("PurchaseLists")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseList_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.MeasurementUnit", "MeasurementUnit")
                        .WithMany("PurchaseLists")
                        .HasForeignKey("MeasurementUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseList_MeasurementUnit");

                    b.HasOne("BismillahGraphicsPro.Data.Product", "Product")
                        .WithMany("PurchaseLists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseList_Product");

                    b.HasOne("BismillahGraphicsPro.Data.Purchase", "Purchase")
                        .WithMany("PurchaseLists")
                        .HasForeignKey("PurchaseId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchaseList_Purchase");

                    b.Navigation("Branch");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PurchasePaymentReceipt", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Account", "Account")
                        .WithMany("PurchasePaymentReceipts")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchasePaymentReceipt_Account");

                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("PurchasePaymentReceipts")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchasePaymentReceipt_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.Registration", "Registration")
                        .WithMany("PurchasePaymentReceipts")
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchasePaymentReceipt_Registration");

                    b.HasOne("BismillahGraphicsPro.Data.Supplier", "Supplier")
                        .WithMany("PurchasePaymentReceipts")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchasePaymentReceipt_Supplier");

                    b.Navigation("Account");

                    b.Navigation("Branch");

                    b.Navigation("Registration");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PurchasePaymentRecord", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Account", "Account")
                        .WithMany("PurchasePaymentRecords")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchasePaymentRecord_Account");

                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("PurchasePaymentRecords")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchasePaymentRecord_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.Purchase", "Purchase")
                        .WithMany("PurchasePaymentRecords")
                        .HasForeignKey("PurchaseId")
                        .IsRequired()
                        .HasConstraintName("FK_PurchasePaymentRecord_Purchase");

                    b.HasOne("BismillahGraphicsPro.Data.PurchasePaymentReceipt", "PurchaseReceipt")
                        .WithMany("PurchasePaymentRecords")
                        .HasForeignKey("PurchaseReceiptId")
                        .HasConstraintName("FK_PurchasePaymentRecord_PurchasePaymentReceipt");

                    b.Navigation("Account");

                    b.Navigation("Branch");

                    b.Navigation("Purchase");

                    b.Navigation("PurchaseReceipt");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Registration", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Registrations")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Registration_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Selling", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Sellings")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Selling_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.Registration", "Registration")
                        .WithMany("Sellings")
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK_Selling_Registration");

                    b.HasOne("BismillahGraphicsPro.Data.Vendor", "Vendor")
                        .WithMany("Sellings")
                        .HasForeignKey("VendorId")
                        .IsRequired()
                        .HasConstraintName("FK_Selling_Vendor");

                    b.Navigation("Branch");

                    b.Navigation("Registration");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SellingList", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("SellingLists")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingList_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.MeasurementUnit", "MeasurementUnit")
                        .WithMany("SellingLists")
                        .HasForeignKey("MeasurementUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingList_MeasurementUnit");

                    b.HasOne("BismillahGraphicsPro.Data.Product", "Product")
                        .WithMany("SellingLists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingList_Product");

                    b.HasOne("BismillahGraphicsPro.Data.Selling", "Selling")
                        .WithMany("SellingLists")
                        .HasForeignKey("SellingId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingList_Selling");

                    b.Navigation("Branch");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("Selling");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SellingPaymentReceipt", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Account", "Account")
                        .WithMany("SellingPaymentReceipts")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingPaymentReceipt_Account");

                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("SellingPaymentReceipts")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingPaymentReceipt_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.Registration", "Registration")
                        .WithMany("SellingPaymentReceipts")
                        .HasForeignKey("RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingPaymentReceipt_Registration");

                    b.HasOne("BismillahGraphicsPro.Data.Vendor", "Vendor")
                        .WithMany("SellingPaymentReceipts")
                        .HasForeignKey("VendorId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingPaymentReceipt_Vendor");

                    b.Navigation("Account");

                    b.Navigation("Branch");

                    b.Navigation("Registration");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SellingPaymentRecord", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("SellingPaymentRecords")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingPaymentRecord_Branch");

                    b.HasOne("BismillahGraphicsPro.Data.Selling", "Selling")
                        .WithMany("SellingPaymentRecords")
                        .HasForeignKey("SellingId")
                        .IsRequired()
                        .HasConstraintName("FK_SellingPaymentRecord_Selling");

                    b.HasOne("BismillahGraphicsPro.Data.SellingPaymentReceipt", "SellingReceipt")
                        .WithMany("SellingPaymentRecords")
                        .HasForeignKey("SellingReceiptId")
                        .HasConstraintName("FK_SellingPaymentRecord_SellingPaymentReceipt");

                    b.Navigation("Branch");

                    b.Navigation("Selling");

                    b.Navigation("SellingReceipt");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SmsSendRecord", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("SmsSendRecords")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_SmsSendRecord_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Supplier", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Suppliers")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Supplier_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Vendor", b =>
                {
                    b.HasOne("BismillahGraphicsPro.Data.Branch", "Branch")
                        .WithMany("Vendors")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_Vendor_Branch");

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Account", b =>
                {
                    b.Navigation("AccountDeposits");

                    b.Navigation("AccountLogs");

                    b.Navigation("AccountWithdraws");

                    b.Navigation("Expanses");

                    b.Navigation("PurchasePaymentReceipts");

                    b.Navigation("PurchasePaymentRecords");

                    b.Navigation("SellingPaymentReceipts");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Branch", b =>
                {
                    b.Navigation("AccountLogs");

                    b.Navigation("Accounts");

                    b.Navigation("ExpanseCategories");

                    b.Navigation("Expanses");

                    b.Navigation("MeasurementUnits");

                    b.Navigation("ProductCategories");

                    b.Navigation("Products");

                    b.Navigation("PurchaseLists");

                    b.Navigation("PurchasePaymentReceipts");

                    b.Navigation("PurchasePaymentRecords");

                    b.Navigation("Purchases");

                    b.Navigation("Registrations");

                    b.Navigation("SellingLists");

                    b.Navigation("SellingPaymentReceipts");

                    b.Navigation("SellingPaymentRecords");

                    b.Navigation("Sellings");

                    b.Navigation("SmsSendRecords");

                    b.Navigation("Suppliers");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.ExpanseCategory", b =>
                {
                    b.Navigation("Expanses");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.MeasurementUnit", b =>
                {
                    b.Navigation("PurchaseLists");

                    b.Navigation("SellingLists");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PageLink", b =>
                {
                    b.Navigation("PageLinkAssigns");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PageLinkCategory", b =>
                {
                    b.Navigation("PageLinks");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Product", b =>
                {
                    b.Navigation("PurchaseLists");

                    b.Navigation("SellingLists");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Purchase", b =>
                {
                    b.Navigation("PurchaseLists");

                    b.Navigation("PurchasePaymentRecords");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.PurchasePaymentReceipt", b =>
                {
                    b.Navigation("PurchasePaymentRecords");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Registration", b =>
                {
                    b.Navigation("AccountLogs");

                    b.Navigation("PageLinkAssigns");

                    b.Navigation("PurchasePaymentReceipts");

                    b.Navigation("Purchases");

                    b.Navigation("SellingPaymentReceipts");

                    b.Navigation("Sellings");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Selling", b =>
                {
                    b.Navigation("SellingLists");

                    b.Navigation("SellingPaymentRecords");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.SellingPaymentReceipt", b =>
                {
                    b.Navigation("SellingPaymentRecords");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Supplier", b =>
                {
                    b.Navigation("PurchasePaymentReceipts");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("BismillahGraphicsPro.Data.Vendor", b =>
                {
                    b.Navigation("SellingPaymentReceipts");

                    b.Navigation("Sellings");
                });
#pragma warning restore 612, 618
        }
    }
}
