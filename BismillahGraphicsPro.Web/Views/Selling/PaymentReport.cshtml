@{
    ViewData["Title"] = "Selling Payment Report";
    Layout = "_AdminLayout";
}


<div x-data="initData()" x-init="getTableData()" class="row align-items-center mt-3">
    <div class="col">
        <h1 class="page-header">Payment Report: ৳<span x-text="totalPaid"></span></h1>
    </div>
    <div class="col-sm-6">
        <form x-on:submit.prevent="finByDate">
            <div class="d-flex">
                <input x-ref="fromDate" :value="defaultDates.from" class="form-control datepicker" placeholder="Form Date" type="text">
                <input x-ref="toDate" :value="defaultDates.to" class="form-control datepicker mx-3" placeholder="To Date" type="text">
                <div>
                    <button class="btn btn-custom-bg btn-md my-0" type="submit">Find</button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="card card-body mt-4">
    <table id="data-table" class="table table-sm">
        <thead>
            <tr>
                <th>Paid Date</th>
                <th>Vendor</th>
                <th>Receipt</th>
                <th class="text-right">Paid Amount</th>
            </tr>
        </thead>
    </table>
</div>



@section Scripts {
<script>
    $(function() {
        $('.datepicker').pickadate();
    });


    //data table
    const dataTable = {
        table: null,
        filter: [],
        init: function() {
            dataTable.table = $("#data-table").DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: "/selling/GetPaymentData",
                    type: "POST",
                    data: function(d) {
                        d.filters = dataTable.filter;
                    }
                },
                columns:
                [
                    {
                        data: "PaidDate",
                        "render": function(data, type, row) {
                            return moment(data).format("D MMM, YYYY");
                        }
                    },
                    { data: "VendorCompanyName" },
                    {
                        data: "ReceiptSn",
                        "render": function(data, type, row) {
                            return `<a class="blue-text" href="/selling/paymentReceipt/${row.SellingReceiptId}">${data}</a>`;
                        }
                    },
                    { data: "PaidAmount", "render": function(data) { return `৳${data}` } },
                ],
                columnDefs: [
                    //{ 'searchable': false, 'targets': [7, 8] },
                    //{ 'sortable': false, 'targets': [7, 8] },
                    { 'className': "text-center", "targets": [0, 2] },
                    { 'className': "text-right", "targets": [3] }
                ]
            });
        },
        operand: {
            Equal: 0,
            NotEqual: 1,
            GreaterThan: 2,
            LessThan: 3,
            GreaterThanOrEqual: 4,
            LessThanOrEqual: 5,
            Contains: 6,
            StartsWith: 7,
            EndsWith: 8
        },
        getData: function() {
            dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
        }
    }

    //alpine js code
    function initData() {
        return {
            loading: false,
            totalPaid: 0,
            defaultDates: {
                from: moment().startOf('month').format('D MMMM, YYYY'),
                to: moment().endOf('month').format('D MMMM, YYYY')
            },

            //get total paid amount
            async getTotalDue(from,to) {
                try {
                    const response = await fetch(`/selling/GetPaid?from=${from}&to=${to}`);
                    const responseData = await response.json();
                    this.totalPaid = responseData.Data;

                } catch (error) {
                    console.log(error);
                }
            },


            //data table get data
            getTableData(from = this.defaultDates.from, to = this.defaultDates.to) {
                const filter = [
                    { Field: "PaidDate", Value: from, Operand: dataTable.operand.GreaterThanOrEqual },
                    { Field: "PaidDate", Value: to, Operand: dataTable.operand.LessThanOrEqual }
                ]

                dataTable.filter = filter;
                dataTable.getData();


                this.getTotalDue(from, to);
            },


            //bill find by date
            finByDate() {
                const from = this.$refs.fromDate.value;
                const to = this.$refs.toDate.value;

                this.getTableData(from,to);
            }
        };
    }
</script>
}
