@{
    ViewData["Title"] = "Selling";
    Layout = "_AdminLayout";
}

@section Styles{
<style>
    .length, .width {
        display: inline-block;
        width: 60px;
        margin: 5px;
        text-align: center;
    }
</style>
}

<div x-data="initData()" x-init="getDropdownData">
    <h1 class="page-header my-3">Selling</h1>

    <form x-on:submit.prevent="insertData()">
        <div class="row">
            <div class="col-xl-9 col-lg-8 mb-4">
                <div class="card card-body">
                    <div class="md-form">
                        <div x-init="findProduct" class="form-group">
                            <label for="inputFindProduct">Find Product</label>
                            <input id="inputFindProduct" x-ref="findProduct" x-model="clearInput" type="text" class="form-control">
                        </div>
                    </div>

                    <table id="data-table" class="table table-sm">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th class="text-center">Description</th>
                                <th>Quantity</th>
                                <th>M.Unit</th>
                                <th>Unit Price</th>
                                <th class="text-right">Line Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <template x-for="(product,index) in model.products" :key="product.Id">
                                <tr>
                                    <td>
                                        <strong x-text="product.ProductName"></strong>
                                        <small class="d-block" x-text="product.ProductCategoryName"></small>
                                    </td>
                                    <td class="d-flex justify-content-center">
                                        <input x-model.number="product.Length" x-on:change="saveData" x-on:input="calculateTotal" type="number" step="0.01" min="0" class="form-control length" placeholder="Length" required>
                                        <input x-model.number="product.Width" x-on:change="saveData" x-on:input="calculateTotal" type="number" step="0.01" min="0" class="form-control width" placeholder="Width" required>
                                    </td>
                                    <td class="text-center" x-text="product.Length * product.Width"></td>
                                    <td>
                                        <select x-model.number="product.MeasurementUnitId" x-on:change="saveData" class="form-control" required>
                                            <option value="">[ SELECT ]</option>
                                            <template x-for="item in measurementUnits" :key="item.value">
                                                <option :selected="+item.value === product.MeasurementUnitId" :value="item.value" x-text="item.label"></option>
                                            </template>
                                        </select>
                                    </td>
                                    <td>
                                        <input x-model.number="product.SellingUnitPrice"
                                               x-on:input="calculateTotal"
                                               x-on:change="saveData"
                                               type="number" step="0.0001"
                                               min="0" class="form-control" required>
                                    </td>
                                    <td class="text-right">
                                        <strong x-text="Math.ceil((product.Length * product.Width) * product.SellingUnitPrice)"></strong>/-
                                    </td>
                                    <td class="text-center">
                                        <a x-on:click="removeProduct(product.Id)" class="btn btn-link red-text">
                                            <i class="fas fa-trash-alt"></i>
                                        </a>
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                </div>
            </div>

            <div x-init="calculateTotal()" class="col-xl-3 col-lg-4">
                <div class="card card-body">
                    <div x-init="findVendor" class="form-group">
                        <label>Vendor <a href="/Selling/Vendors" target="_blank">Add new</a></label>
                        <input x-ref="findVendor" x-on:keyup.debounce="resetVendor" type="text" class="form-control" placeholder="find by name, phone" required>
                    </div>
                    <div>
                        <span class="badge badge-primary" x-text="Vendor.VendorCompanyName"></span>
                        <span class="badge badge-primary" x-text="Vendor.VendorPhone"></span>
                    </div>
                    <h6 x-show="Vendor.VendorDue>0" class="font-weight-bold my-4 text-danger">
                        <span>Previous Due:</span>
                        ৳<span x-text="Vendor.VendorDue"></span>
                    </h6>
                    <h6 class="font-weight-bold">
                        <span>Today Sales:</span>
                        ৳<span x-text="totalAmount"></span>
                    </h6>
                    <div class="form-group mt-2 mb-4">
                        <label>Discount</label>
                        <input x-model.number="model.SellingDiscountAmount" type="number" class="form-control">
                    </div>
                    <h6 class="font-weight-bold text-success">
                        <span>Today Payable:</span>
                        ৳<span x-text="totalAmount - model.SellingDiscountAmount"></span>
                    </h6>
                    <div class="form-group mt-2 mb-4">
                        <label>Today Paid</label>
                        <input x-model.number="model.SellingPaidAmount" type="number" class="form-control" :max="totalAmount - model.SellingDiscountAmount">
                    </div>
                    <h6 class="font-weight-bold text-danger">
                        <span>Today Due:</span>
                        ৳<span x-text="(totalAmount - model.SellingDiscountAmount) - model.SellingPaidAmount"></span>
                    </h6>
                    <div class="form-group mt-2 mb-4">
                        <label>Payment Method</label>
                        <select x-model.number="model.AccountId" class="form-control" :required="model.SellingPaidAmount>0">
                            <option value="">[ SELECT ]</option>
                            <template x-for="account in accounts" :key="account.value">
                                <option :value="account.value" x-text="account.label"></option>
                            </template>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <input x-model="model.Description" type="text" class="form-control">
                    </div>
                    <div class="form-group mt-2 mb-4">
                        <label>Selling Date</label>
                        <input x-ref="datePicker" type="text" class="form-control datepicker" :value="moment().format('D MMMM, YYYY')" />
                    </div>

                    <div class="mt-3">
                        <button :disabled="totalAmount <= 0 || loading" class="btn btn-custom-bg w-100" type="submit">Selling</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>



@section Scripts {
    <script>
        $(function() {
            $('.datepicker').pickadate();
        });

        //get local store
        function getStore() {
            const store = localStorage.getItem("Selling-data");
            return store ? JSON.parse(store) : {};
        }

        //alpine js code
        function initData() {
            const {
                SellingDiscountAmount = 0,
                SellingPaidAmount = 0,
                products = []
            } = getStore();

            return {
                loading: false,
                clearInput: "",
                Vendor: {},
                model: {
                    SellingDiscountAmount,
                    SellingPaidAmount,
                    products
                },

                //save data to local store
                saveData() {
                    localStorage.setItem("Selling-data", JSON.stringify(this.model));
                },

                //dropdown list
                accounts: [],
                measurementUnits: [],

                //get dropdown data
                async getDropdownData() {
                    //get account
                    const accountResponse = await fetch("/common/getAccount");
                    const account = await accountResponse.json();
                    this.accounts = account;

                    //get measurement
                    const measurementResponse = await fetch("/common/getMeasurementUnit");
                    const measurement = await measurementResponse.json();
                    this.measurementUnits = measurement;
                },

                //add product to list
                addProductToList(product) {
                    const data = { ...product, Id: +new Date, Length: 0, Width: 0, SellingUnitPrice: product.ProductPrice }

                    this.model.products.push(data);
                    this.clearInput = "";
                    this.$refs.findProduct.focus();

                    //save to local
                    this.saveData();
                },

                //find product (autocomplete)
                findProduct() {
                    $(this.$refs.findProduct).typeahead({
                        minLength: 1,
                        displayText: item => {
                            return item.ProductName;
                        },
                        afterSelect: function(item) {
                            this.$element[0].value = item.ProductName;
                        },
                        source: (request, result) => {
                            $.ajax({
                                url: `/common/findProduct`,
                                data: { prefix: request },
                                success: response => result(response),
                                error: err => console.log(err)
                            });
                        },
                        updater: item => {
                            this.addProductToList(item);
                            return item;
                        }
                    })
                },

                //remove Data
                removeProduct(id) {
                    this.model.products = this.model.products.filter(item => item.Id !== id);

                    //save to local
                    this.saveData();

                    const total = this.calculateTotal();

                    if (!total) {
                        this.model.SellingDiscountAmount = 0
                        this.model.SellingPaidAmount = 0
                    }
                },

                //sum total amount
                totalAmount: 0,
                calculateTotal() {
                    const total = this.model.products.map(item => (item.Length * item.Width) * +item.SellingUnitPrice).reduce((prev, current) => prev + current, 0);
                    this.totalAmount = Math.ceil(total);

                    return Math.ceil(total) || 0;
                },

                //find Vendor (autocomplete)
                findVendor() {
                    $(this.$refs.findVendor).typeahead({
                        minLength: 1,
                        displayText: item => {
                            return `${item.VendorCompanyName} ${item.VendorPhone}`;
                        },
                        afterSelect: function(item) {
                            this.$element[0].value = item.VendorCompanyName;
                        },
                        source: (request, result) => {
                            $.ajax({
                                url: `/common/findVendor`,
                                data: { prefix: request },
                                success: response => result(response),
                                error: err => console.log(err)
                            });
                        },
                        updater: item => {
                            this.Vendor = item;
                            return item;
                        }
                    })
                },

                //reset Vendor
                resetVendor() {
                    this.Vendor = {};
                },

                //insert data
                insertData() {
                    if (!this.model.products.length)
                        return $.notify("Add Product!", "error");

                    if (!this.Vendor.VendorId)
                        return $.notify("Select Vendor!", "error");

                    const total = this.calculateTotal();

                    const model = {
                        VendorId: this.Vendor.VendorId,
                        AccountId: this.model.AccountId,
                        SellingTotalPrice: total,
                        SellingDiscountAmount: this.model.SellingDiscountAmount,
                        SellingPaidAmount: this.model.SellingPaidAmount,
                        SellingDueAmount: (total - this.model.SellingDiscountAmount) - this.model.SellingPaidAmount,
                        Description: this.model.Description,
                        SellingDate: this.$refs.datePicker.value,
                        SellingLists: this.model.products.map(item => {
                            return {
                                ProductId: item.ProductId,
                                MeasurementUnitId: item.MeasurementUnitId,
                                SellingQuantity: item.Length * item.Width,
                                SellingUnitPrice: item.SellingUnitPrice,
                                Length: item.Length,
                                Width: item.Width
                            }
                        })
                    };

                    this.loading = true;

                    $.ajax({
                        type: "POST",
                        url: "/Selling/PostSelling",
                        data: model,
                        success: response => {
                            if (response.IsSuccess) {
                                localStorage.removeItem("Selling-data");
                                location.href = `/Selling/receipt/${response.Data}`;
                            }

                            $.notify(response.Message, response.IsSuccess ? "success" : "error");
                            this.loading = false;
                        },
                        error: error => {
                            console.log(error);
                            this.loading = false;
                        }
                    });
                }
            };
        }
    </script>
}
