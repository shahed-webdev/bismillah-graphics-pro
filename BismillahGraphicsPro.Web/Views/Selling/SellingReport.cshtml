@{
    ViewData["Title"] = "Sales Report";
    Layout = "_AdminLayout";
}


<div x-data="initData()" class="row align-items-center mt-3">
    <div class="col">
        <h1 class="page-header">Sales Report: ৳<span x-text="totalAmount"></span></h1>
    </div>
    <div x-init="onDataInit()" class="col-sm-6">
        <form x-on:submit.prevent="finByDate">
            <div class="d-flex">
                <input name="fromDate" :value="pickedDates.fromDate" class="form-control datepicker" placeholder="Form Date" type="text">
                <input name="toDate" :value="pickedDates.toDate" class="form-control datepicker mx-3" placeholder="To Date" type="text">
                <div>
                    <button class="btn btn-custom-bg btn-md my-0" type="submit">Find</button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="card card-body mt-4">
    <table id="data-table" class="table table-sm">
        <thead>
            <tr>
                <th>Invoice</th>
                <th>Vendor</th>
                <th>Amount</th>
                <th>Paid</th>
                <th>Due</th>
                <th>Date</th>
            </tr>
        </thead>
    </table>
</div>



@section Scripts {
    <script>

        //data table
        const dataTable = {
            table: null,
            filter: [],
            init: function() {
                dataTable.table = $("#data-table").DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: "/Selling/GetRecordsData",
                        type: "POST",
                        data: function(d) {
                            d.filters = dataTable.filter;
                        }
                    },
                    columns:
                    [
                        { data: "SellingSn", "render": function(data, type, row) { return `<a class="blue-text" href="/Selling/receipt/${row.SellingId}">${data}</a>` } },
                        { data: "VendorCompanyName" },
                        { data: "SellingTotalPrice" },
                        { data: "SellingPaidAmount" },
                        {
                            data: "SellingDueAmount",
                            "render": function(data, type, row) {
                                return data ? `<a class="blue-text" href="/selling/DueCollectionSingle/${row.SellingId}">${data}</a>` : data;
                            }
                        },
                        { data: "SellingDate", "render": function(data) { return moment(data).format('DD MMM YYYY') } }
                    ],
                    columnDefs: [
                        { 'searchable': false, 'targets': [0, 5] },
                        //{ 'sortable': false, 'targets': [6] },
                        { 'className': "text-center", "targets": [0, 5] },
                        { 'className': "text-right", "targets": [2, 3, 4] }
                    ]
                });
            },
            operand: {
                Equal: 0,
                NotEqual: 1,
                GreaterThan: 2,
                LessThan: 3,
                GreaterThanOrEqual: 4,
                LessThanOrEqual: 5,
                Contains: 6,
                StartsWith: 7,
                EndsWith: 8
            },
            getData: function() {
                dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
            }
        }

        //alpine js code
        function initData() {
            return {
                loading: false,
                totalAmount: 0,
                pickedDates: {
                    fromDate: moment().startOf("month").format("DD MMMM, YYYY"),
                    toDate: moment().endOf("month").format("DD MMMM, YYYY")
                },

                //get total paid amount
                async getTotal(from, to) {
                    try {
                        const response = await fetch(`/selling/GetTotalSales?from=${from}&to=${to}`);
                        const responseData = await response.json();
                        this.totalAmount = responseData.Data;

                    } catch (error) {
                        console.log(error);
                    }
                },

                //data table get data
                getTableData() {
                    const { fromDate, toDate } = this.pickedDates;

                    dataTable.filter.push({ Field: "SellingDate", Value: fromDate, Operand: dataTable.operand.GreaterThanOrEqual });
                    dataTable.filter.push({ Field: "SellingDate", Value: toDate, Operand: dataTable.operand.LessThanOrEqual });
                    dataTable.getData();

                    this.getTotal(fromDate, toDate);
                },

                //date function init
                onDataInit() {
                    this.getTableData();

                    const self = this.pickedDates;

                    $('.datepicker').pickadate({
                        onSet: function(context) {
                            self[this.component.$node[0].name] = moment(context.select).format("D, MMM YYYY");
                        }
                    });
                },

                //bill find by date
                finByDate() {
                    this.getTableData();
                }
            };
        }
    </script>
}
