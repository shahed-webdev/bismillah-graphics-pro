@model SellingReceiptViewModel
@{
    ViewData["Title"] = "Selling Receipt";
    Layout = "_AdminLayout";
}

@section Styles{
<link rel="stylesheet" href="/css/receipt.css">
}

<section class="my-4 d-print-none">
    <div class="d-flex justify-content-between">
        <div>
            @if (Model.SellingDueAmount > 0)
            {
                <a class="btn btn-success btn-rounded" href="/Selling/DueCollectionSingle/@Model.SellingId"><i class="fas fa-money-bill-alt mr-1"></i>Pay Due</a>
            }
            else
            {
                <button disabled="" class="btn btn-success btn-rounded"><i class="fas fa-money-bill-alt mr-1"></i>No Due</button>
            }

            <a class="btn btn-discord btn-rounded" href="/Selling/records"><i class="fas fa-shopping-bag mr-1"></i>Selling Record</a>
        </div>
        <div>
            <a class="btn btn-elegant btn-rounded" href="/Selling"><i class="fas fa-shopping-cart mr-1"></i>Selling</a>
            <button class="btn btn-default btn-rounded" onclick="print()"><i class="fas fa-print mr-1"></i>Print</button>
        </div>
    </div>
</section>


<div id="main-page">
    <div class="row my-2 align-items-center">
        <div class="col">
            <span>RECEIPT# @Model.SellingSn</span>
        </div>
        <div class="col text-center">
            <div class="invice-title">BILL</div>
        </div>
        <div class="col text-right">
            <span>Date: @Model.SellingDate.ToString("d MMM yyyy")</span>
        </div>
    </div>

    <div class="row mb-2" id="vendor-area">
        <div class="col-7">
            <h5><strong>@Model.Vendor.VendorCompanyName</strong></h5>
            <h5><strong>@Model.Vendor.VendorName</strong></h5>
        </div>
        <div class="col text-right">
            @if (!string.IsNullOrEmpty(Model.Vendor.VendorAddress))
            {
                <h5><strong>@Model.Vendor.VendorAddress</strong></h5>
            }
            <h5><strong>@Model.Vendor.VendorPhone</strong></h5>
        </div>
    </div>

    <table>
        <thead>
            <tr>
                <th class="text-center"><strong>No.</strong></th>
                <th><strong>Product Name</strong></th>
                <th class="text-center"><strong>Description</strong></th>
                <th class="text-center"><strong>Quantity</strong></th>
                <th class="text-right"><strong>Unit&nbsp;Price</strong></th>
                <th class="text-right"><strong>Line&nbsp;Total</strong></th>
            </tr>
        </thead>
        <tbody>
            @{
                var index = 0;
                foreach (var item in Model.SellingLists)
                {
                    index++;
                    <tr>
                        <td class="text-center">@index</td>
                        <td>@item.ProductName</td>
                        <td class="text-center">@item.Length x @item.Width</td>
                        <td class="text-center">
                            @item.SellingQuantity
                            @item.MeasurementUnitName
                        </td>
                        <td class="text-right">@item.SellingUnitPrice/-</td>
                        <td class="text-right">@item.SellingPrice?.ToString("0.00")/-</td>
                    </tr>
                }
            }
            <tr>
                <td colspan="4">
                    <span id="amount-word"></span>
                    <p>@Model.Description</p>
                </td>
                <td colspan="2">
                    <div class="text-right">
                        @{
                            var previousDue = Model.Vendor.VendorDue-Model.SellingDueAmount;
                        }

                        @if (previousDue > 0)
                        {
                            <p>Pvs Due: <strong>@previousDue/-</strong></p>
                        }

                        <p>T. Sales: <strong>@Model.SellingTotalPrice/-</strong></p>

                        @if (Model.SellingDiscountAmount > 0)
                        {
                            <p>Discount: <strong>@Model.SellingDiscountAmount/-</strong></p>
                        }

                        <p>T. Paid: <strong> @Model.SellingPaidAmount/-</strong></p>
                        <p>T. Due: <strong>@Model.Vendor.VendorDue/-</strong></p>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>



    <div class="d-flex justify-content-between align-items-center d-print-none mt-3">
        <button id="btnBlockReadySendSMS" @(Model.Vendor.SmsNumber =="" ? "disabled='disabled'" : "") data-number="@Model.Vendor.SmsNumber" class="btn btn-outline-primary"><i class="fas fa-paper-plane mr-1"></i>Send Product Received SMS</button>
        <div class="text-center">
            <h5 id="smsBalance" class="font-weight-bold"></h5>
            <em class="m-0 text-muted">SMS Number: @(Model.Vendor.SmsNumber=="" ? "N/A" : Model.Vendor.SmsNumber)</em>
        </div>
        <button id="btnSendPaymentSMS" @(Model.Vendor.SmsNumber=="" ? "disabled='disabled'" : "") data-number="@Model.Vendor.SmsNumber" class="btn btn-outline-danger"><i class="fas fa-paper-plane mr-1"></i>Send Payment Status</button>
    </div>

    <div class="d-print-none">
        @{
            var paymentRecord = Model.SellingPaymentRecords;

            if (paymentRecord.Count > 0)
            {
                <h5 class="mt-4">PAYMENT RECORD</h5>
                <table class="table table-sm table-bordered text-dark">
                    <thead>
                        <tr>
                            <th><strong>Paid Date</strong></th>
                            <th><strong>Paid Amount</strong></th>
                            <th><strong>Payment Method</strong></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in paymentRecord)
                        {
                            <tr>
                                <td>@item.SellingPaidDate.ToString("d MMM yyyy")</td>
                                <td class="text-right">@item.SellingPaidAmount/-</td>
                                <td class="text-center">
                                    <strong>@item.AccountName</strong>
                                    <em class="text-dark">@item.Description</em>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </div>

    <div class="p-footer">
        <div class="row">
            <div class="col">
                Received By
                <small class="d-block text-muted">@DateTime.Now.ToString("ddd, dd-MMM-yyyy (hh: mm tt)")</small>
            </div>

            <div class="col text-right">
                For
                <small class="d-block text-muted">Served By: <strong>@Model.SoldByUserName</strong></small>
            </div>
        </div>
    </div>
</div>

<form id="deleteForm" class="d-print-none">
    <button type="submit" class="btn btn-danger mx-0 mt-4">Delete Bill</button>
</form>


@section scripts{
<script>
    $(function() {
        $("#amount-word").text(`Taka (in words): ${number2text(@Model.SellingTotalPrice)}`);

        getSMSBalance();
    });

    //amount in word
    function number2text(value) {
        const fraction = Math.round((value % 1) * 100);
        var fullText = "";

        if (fraction > 0) {
            fullText = `AND ${convertNumber(fraction)} PAISA`;
        }

        return convertNumber(value) + " TK " + fullText + " ONLY";
    }

    function convertNumber(number) {
        if ((number < 0) || (number > 999999999)) return "NUMBER OUT OF RANGE!";

        var coreAmount = Math.floor(number / 10000000);
        number -= coreAmount * 10000000;

        var lakhAmount = Math.floor(number / 100000);
        number -= lakhAmount * 100000;

        var thousandAmount = Math.floor(number / 1000);
        number -= thousandAmount * 1000;

        var hundredAmount = Math.floor(number / 100);
        number = number % 100;

        var tn = Math.floor(number / 10);
        var one = Math.floor(number % 10);
        var res = "";

        if (coreAmount > 0) {
            res += (convertNumber(coreAmount) + " CRORE");
        }
        if (lakhAmount > 0) {
            res += (((res === "") ? "" : " ") + convertNumber(lakhAmount) + " LAKH");
        }
        if (thousandAmount > 0) {
            res += (((res === "") ? "" : " ") + convertNumber(thousandAmount) + " THOUSAND");
        }

        if (hundredAmount) {
            res += (((res === "") ? "" : " ") + convertNumber(hundredAmount) + " HUNDRED");
        }

        var ones = Array("", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE", "TEN", "ELEVEN", "TWELVE", "THIRTEEN", "FOURTEEN", "FIFTEEN", "SIXTEEN", "SEVENTEEN", "EIGHTEEN", "NINETEEN");
        var tens = Array("", "", "TWENTY", "THIRTY", "FORTY", "FIFTY", "SIXTY", "SEVENTY", "EIGHTY", "NINETY");

        if (tn > 0 || one > 0) {
            if (!(res === "")) {
                res += " AND ";
            }

            if (tn < 2) {
                res += ones[tn * 10 + one];
            } else {
                res += tens[tn];
                if (one > 0) {
                    res += (`-${ones[one]}`);
                }
            }
        }

        if (res === "") {
            res = "zero";
        }
        return res;
    }


    //SMS balance
    function getSMSBalance() {
        const balance = document.getElementById('smsBalance');
        balance.textContent = "loading.."
        $.ajax({
            url: '/SMS/GetBalance',
            type: "GET",
            success: function(response) {
                balance.textContent = `Remaining SMS: ${response}`;
            },
            error: error => console.log(error)
        });
    }

    //send SMS
    const btnBlockReadySendSMS = document.getElementById('btnBlockReadySendSMS');
    const btnSendPaymentSMS = document.getElementById('btnSendPaymentSMS');

    //sms product received
    btnBlockReadySendSMS.addEventListener('click',
        function() {
            const number = this.getAttribute('data-number');
            if (!number) return;

            const text = `Dear Valued Vendor, I have received your product. Bill Amount TK: @Model.SellingTotalPrice Thanks @ViewBag.branchInfo.BranchName. @ViewBag.branchInfo.BranchPhone`;
            const model = { PhoneNumber: number, TextSms: text };

            send(model);
        });

    //sms payment status
    btnSendPaymentSMS.addEventListener('click',
        function() {
            const number = this.getAttribute('data-number');
            if (!number) return;

            const paidAmount = @Model.SellingPaidAmount;
            const dueAmount = @Model.SellingDueAmount;

            const paid = paidAmount ? ` Paid Amount Tk: ${paidAmount}. ` : "";
            const due = dueAmount ? ` Due Amount Tk: ${dueAmount}, please pay dues. ` : "";

            const text = `Dear Valued Vendor, The Order Amount Tk: @Model.SellingTotalPrice.${paid}${due}Thanks @ViewBag.branchInfo.BranchName. @ViewBag.branchInfo.BranchPhone`;
            const model = { PhoneNumber: number, TextSms: text };

            send(model);
        });

    //send to server
    function send(model) {
        $.ajax({
            url: '/SMS/PostSingle',
            type: "POST",
            data: model,
            success: function(response) {
                location.href = "/Selling";
            },
            error: error => console.log(error)
        });
    }


    //delete Bill
    const deleteForm = document.getElementById("deleteForm");
    deleteForm.addEventListener("submit",
        function(evt) {
            evt.preventDefault();

            $.ajax({
                url: '/selling/DeleteBill/@Model.SellingId',
                success: function(response) {
                    if (response.IsSuccess)
                        location.href = "/Selling/records";
                },
                error: error => console.log(error)
            });
        });

</script>
}

