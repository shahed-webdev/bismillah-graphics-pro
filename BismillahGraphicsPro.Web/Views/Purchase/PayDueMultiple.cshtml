@{
    ViewData["Title"] = "Purchase";
    Layout = "_AdminLayout";
}

<div x-data="initData()" x-init="getDropdownData">
    <div class="container">
        <form x-on:submit.prevent="finByDate">
            <div class="row align-items-center mt-3">
                <div class="col">
                    <h5 x-text="model.SupplierCompanyName" class="mb-0 font-weight-bold"></h5>
                    <p class="mb-0">
                        <span x-text="model.SupplierAddress"></span>,
                        <span x-text="model.SmsNumber"></span>
                    </p>
                </div>
                <div class="col-sm-7">
                    <div class="row">
                        <div class="col">
                            <input name="fromDate" :value="pickedDates.fromDate" class="form-control datepicker" placeholder="Form Date" type="text">
                        </div>
                        <div class="col">
                            <input name="toDate" :value="pickedDates.toDate" class="form-control datepicker" placeholder="To Date" type="text">
                        </div>
                        <div>
                            <button class="btn btn-custom-bg btn-md my-0" type="submit">Search</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <ul class="list-group list-group-horizontal my-4 text-right font-weight-bold">
            <li class="list-group-item flex-fill">Sales: ৳<strong x-text="model.Amount"></strong></li>
            <li class="list-group-item flex-fill">Received: ৳<strong x-text="model.Paid"></strong></li>
            <li class="list-group-item flex-fill">Total Discount: ৳<strong x-text="model.Discount"></strong></li>
            <li class="list-group-item flex-fill">Total Due: ৳<strong x-text="model.Due"></strong></li>
        </ul>

        <form x-on:submit.prevent="payDues">
            <div class="card card-body">
                <table class="table table-bordered table-sm">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th class="text-center">Bill No</th>
                            <th class="text-right">Sales</th>
                            <th class="text-right">Discount</th>
                            <th class="text-right">Received</th>
                            <th class="text-right">Due Balance</th>
                            <th class="text-right">Paid</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="(item,index) in model.Purchases" :key="item.PurchaseId">
                            <tr>
                                <td x-text="moment(item.PurchaseDate).format('D MMM, YYYY')"></td>
                                <td class="text-center" x-text="item.PurchaseSn"></td>
                                <td class="text-right">
                                    ৳<span x-text="item.PurchaseTotalPrice"></span>
                                </td>
                                <td class="text-right" style="max-width: 100px">
                                    <input x-model.number="item.PurchaseDiscountAmount" x-on:input="onDiscountChange(index)" type="number" class="form-control text-right" min="0" :max="item.PurchaseTotalPrice-item.PurchasePaidAmount" step="0.01" placeholder="Discount amount">
                                </td>
                                <td class="text-right">
                                    ৳<span x-text="item.PurchasePaidAmount"></span>
                                </td>
                                <td class="text-right">
                                    ৳<span x-text="item.PurchaseDueAmount"></span>
                                </td>
                                <td class="text-right">
                                    ৳<span x-text="item.Paying || 0"></span>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>

            <div class="d-flex align-items-center flex-wrap mt-3">
                <div class="form-group">
                    <input x-model.number="model.PaidAmount" x-on:input="inputPaidAmount" x-ref="totalPaid" type="number" step="0.01" min="0.01" :max="model.Due" class="form-control" placeholder="Total Paid Amount" required>
                </div>
                <div class="form-group mx-3">
                    <input name="PaidDate" :value="pickedDates.PaidDate" placeholder="Paid Date" type="text" class="form-control datepicker" required>
                </div>
                <div class="form-group">
                    <select x-model.number="model.AccountId" class="form-control" required>
                        <option value="">[ Payment Method ]</option>
                        <template x-for="account in accounts" :key="account.value">
                            <option :value="account.value" x-text="account.label"></option>
                        </template>
                    </select>
                </div>
                <div class="form-group mx-3">
                    <input x-model="model.Description" type="text" class="form-control" placeholder="Description">
                </div>
                <div class="form-group">
                    <input type="submit" class="btn btn-custom-bg btn-md" value="Paid">
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts {
<script>
    //alpine js code
    function initData() {
        return {
            loading: false,
            pickedDates: { fromDate: '', toDate: '', PaidDate: "" },
            model: JSON.parse('@Html.Raw(Json.Serialize(ViewBag.dueModel))'),

            //dropdown list
            accounts: [],

            //get dropdown data
            async getDropdownData() {
                //reset paid amount after reload
                this.$refs.totalPaid.value = "";

                const accountResponse = await fetch("/common/getAccount");
                const account = await accountResponse.json();
                this.accounts = account;

                this.dateInit();
            },

            //date function init
            dateInit() {
                const self = this.pickedDates;
                self.PaidDate = moment(new Date()).format("D, MMM YYYY");

                $('.datepicker').pickadate({
                    onSet: function(context) {
                        self[this.component.$node[0].name] = moment(context.select).format("D, MMM YYYY");
                    }
                })
            },

            //bill find by date
            async finByDate() {
                const { fromDate, toDate } = this.pickedDates;
                const id = this.model.SupplierId;

                const response = await fetch(`/purchase/PayDueMultiple?id=${id}&from=${fromDate}&to=${toDate}`);
                const responseData = await response.json();

                if (responseData.IsSuccess)
                    this.model = responseData.Data;
            },

            //discount amount change
            onDiscountChange(index) {
                const modelCopy = [...this.model.Purchases];
                const item = modelCopy[index];
                const due = item.PurchaseTotalPrice - item.PurchaseDiscountAmount - item.PurchasePaidAmount;

                modelCopy.forEach((item, i) => {
                    if (i === index) item.PurchaseDueAmount = due;

                    item.Paying = 0;
                });

                this.model.Purchases = modelCopy;
                this.$refs.totalPaid.value = "";
            },

            //input total paid
            inputPaidAmount(evt) {
                let totalPaid = +evt.target.value;

                const purchaseDues = [...this.model.Purchases];

                purchaseDues.forEach(item => {
                    const lineDue = item.PurchaseDueAmount;

                    if (totalPaid < lineDue && totalPaid > 0) {
                        item.Paying = totalPaid;
                    } else if (totalPaid >= lineDue) {
                        item.Paying = lineDue;
                    } else {
                        item.Paying = 0;
                    }

                    totalPaid -= lineDue;
                });

                this.model.Purchases = purchaseDues;
            },

            //submit dues
            async payDues() {
                const { SupplierId, AccountId, PaidAmount, Description, Purchases } = this.model;

                const model = {
                    SupplierId,
                    AccountId,
                    PaidAmount,
                    PaidDate: new Date(this.pickedDates.PaidDate),
                    Description,
                    Bills: Purchases.filter(item => item.Paying > 0).map(item => {
                        return {
                            PurchaseId: item.PurchaseId,
                            PurchasePaidAmount: item.Paying,
                            PurchaseDiscountAmount: item.PurchaseDiscountAmount
                        }
                    })
                }

                if (!model.Bills.length) {
                    return $.notify("No Bill Paid", "error");
                }

                const options = {
                    method: 'POST',
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(model)
                };

                const response = await fetch("/purchase/PostDues", options);
                const responseData = await response.json();

                if (responseData.IsSuccess) {
                    location.href = "/purchase/Suppliers"
                }

                $.notify(responseData.Message, responseData.IsSuccess ? "success" : "error");
            }
        };
    }
</script>
}
