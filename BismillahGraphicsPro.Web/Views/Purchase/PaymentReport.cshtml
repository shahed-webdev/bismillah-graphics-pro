@{
    ViewData["Title"] = "Purchase Payment Report";
    Layout = "_AdminLayout";
}


<div x-data="initData()" x-init="getTableData()" class="row align-items-center mt-4">
    <div class="col">
        <h1 class="page-header">Payment Report: ৳<span x-text="totalPaid"></span></h1>
    </div>
    <div class="col-sm-6">
        <form x-on:submit.prevent="finByDate">
            <div class="d-flex">
                <input x-ref="fromDate" :value="moment().format('D MMMM, YYYY')" class="form-control datepicker" placeholder="Form Date" type="text">
                <input x-ref="toDate" :value="moment().endOf('month').format('D MMMM, YYYY')" class="form-control datepicker mx-3" placeholder="To Date" type="text">
                <div>
                    <button class="btn btn-custom-bg btn-md my-0" type="submit">Find</button>
                </div>
            </div>
        </form>
    </div>
</div>


<div class="card card-body mt-4">
    <table id="data-table" class="table table-sm">
        <thead>
            <tr>
                <th>Receipt</th>
                <th>Supplier</th>
                <th class="text-right">Paid Amount</th>
                <th>Paid Date</th>
            </tr>
        </thead>
    </table>
</div>



@section Scripts {
    <script>
        $(function() {
            $('.datepicker').pickadate();
        });


        //data table
        const dataTable = {
            table: null,
            filter: [],
            init: function() {
                dataTable.table = $("#data-table").DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: "/Purchase/GetPaymentData",
                        type: "POST",
                        data: function(d) {
                            d.filters = dataTable.filter;
                        }
                    },
                    columns:
                    [
                        {
                            data: "ReceiptSn",
                            "render": function(data, type, row) {
                                return `<a class="blue-text" href="/purchase/paymentReceipt/${row.PurchaseReceiptId}">${data}</a>`;
                            }
                        },
                        { data: "SupplierCompanyName" },
                        { data: "PaidAmount", "render": function(data) { return `৳${data}` } },
                        {
                            data: "PaidDate",
                            "render": function(data, type, row) {
                                return moment(data).format("D MMM, YYYY");
                            }
                        }
                    ],
                    columnDefs: [
                        //{ 'searchable': false, 'targets': [7, 8] },
                        //{ 'sortable': false, 'targets': [7, 8] },
                        { 'className': "text-center", "targets": [0, 3] },
                        { 'className': "text-right", "targets": [2] }
                    ]
                });
            },
            operand: {
                Equal: 0,
                NotEqual: 1,
                GreaterThan: 2,
                LessThan: 3,
                GreaterThanOrEqual: 4,
                LessThanOrEqual: 5,
                Contains: 6,
                StartsWith: 7,
                EndsWith: 8
            },
            getData: function() {
                dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
            }
        }

        //alpine js code
        function initData() {
            return {
                loading: false,
                totalPaid: 0,

                //get total paid amount
                async getTotal(from,to) {
                    try {
                        const response = await fetch(`/purchase/GetPaid?from=${from}&to=${to}`);
                        const responseData = await response.json();
                        this.totalPaid = responseData.Data;

                    } catch (error) {
                        console.log(error);
                    }
                },


                //data table get data
                getTableData() {
                    const fromDate = this.$refs.fromDate.value;
                    const toDate = this.$refs.toDate.value;

                    dataTable.filter.push({ Field: "PaidDate", Value: fromDate, Operand: dataTable.operand.GreaterThanOrEqual });
                    dataTable.filter.push({ Field: "PaidDate", Value: toDate, Operand: dataTable.operand.LessThanOrEqual });
                    dataTable.getData();


                    this.getTotal(fromDate, toDate);
                },


                //bill find by date
                finByDate() {
                    this.getTableData();
                }
            };
        }
    </script>
}
