@{
    ViewData["Title"] = "Account";
    Layout = "_AdminLayout";
}

<div x-data="initData()" class="mx-3">
    <h3 class="page-header my-4">Account</h3>

    <form x-on:submit.prevent="insertData">
        <div class="d-flex align-items-center">
            <div class="form-group mr-3">
                <label>Account Name</label>
                <input class="form-control" x-model="formData.accountName" type="text" required>
            </div>
            <div class="pt-3">
                <button type="submit" class="btn btn-md btn-custom-bg text-white m-0">Create <i class="fas fa-check ml-1"></i></button>
            </div>
        </div>
    </form>

    <div class="card card-body">
        <table class="table">
            <thead>
            <tr>
                <th>
                    <strong>Account Name</strong>
                </th>
                <th class="text-right">
                    <strong>Balance</strong>
                </th>
                <th class="text-center">
                    <strong>Withdraw</strong>
                </th>
                <th class="text-center">
                    <strong>Deposit</strong>
                </th>
                <th class="text-center">
                    <strong> Edit</strong>
                </th>
                <th class="text-center">
                    <strong>Delete</strong>
                </th>
            </tr>
            </thead>
            <tbody x-init="getData()">
            <template x-for="(item, index) in data" :key="item.AccountId">
                <tr>
                    <td x-show="!item.isEditMode" x-text="item.AccountName"></td>
                    <td x-show="item.isEditMode">
                        <div class="d-flex align-items-center">
                            <input x-on:click.away="item.isEditMode = false"
                                   x-on:keydown.enter="updateData(index)"
                                   x-on:keydown.window.escape="item.isEditMode = false"
                                   x-model="item.AccountName"
                                   class="form-control flex-1 mr-3"
                                   type="text">

                            <button type="button" :disabled="loading" x-show="item.isEditMode" x-on:click="updateData(index)" class="btn btn-link text-primary">Update</button>
                        </div>
                    </td>
                    <td class="text-right">
                        ৳<span x-text="item.Balance"></span>
                    </td>
                    <td class="text-center">
                        <a x-show="item.Balance > 0" class="text-primary" :href="'/account/withdraw/' + item.AccountId">Withdraw</a>
                        <span x-show="item.Balance <= 0">No balance</span>
                    </td>
                    <td class="text-center">
                        <a class="text-primary" :href="'/account/deposit/' + item.AccountId">Deposit</a>
                    </td>
                    <td class="text-center">
                        <a x-show="!item.isEditMode" x-on:click="item.isEditMode=true" class="fas fa-edit"></a>
                    </td>
                    <td class="text-center">
                        <a x-on:click="deleteData(item.AccountId)" style="color: #ff0000" class="fas fa-trash-alt"></a>
                    </td>
                </tr>
            </template>
            </tbody>
        </table>
    </div>


    <!--loading screen-->
    <div x-show="loading">
        <partial name="loadingSvg" />
    </div>
</div>


@section Scripts {
    <script>
        function initData() {
            return {
                loading: false,
                data: [],
                isEditMode: false,
                formData: {},

                //get data
                async getData() {
                    this.loading = true;

                    const response = await fetch("/Account/GetAccount");
                    const responseData = await response.json();

                    this.data = responseData || [];
                    this.loading = false;
                },

                //insert data
                async insertData() {
                    this.loading = true;

                    try {
                        const options = {
                            method: 'POST',
                            headers: { "Content-Type": "application/x-www-form-urlencoded" },
                            body: `accountName=${this.formData.accountName}`
                        }

                        const response = await fetch("/Account/AddAccount", options);
                        const responseData = await response.json();

                        if (responseData.IsSuccess) {
                            this.data.push(responseData.Data);
                            this.formData = {}
                        }

                        $.notify(responseData.Message, responseData.IsSuccess ? "success" : "error");
                        this.loading = false;

                    } catch (error) {
                        console.log(error);
                        this.loading = false;
                    }
                },

                //update data
                async updateData(index) {
                    try {
                        const updatedData = this.data[index];

                        const options = {
                            method: 'PUT',
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(updatedData)
                        }

                        this.loading = true;

                        const response = await fetch("/Account/UpdateAccount", options);
                        const responseData = await response.json();

                        this.loading = false;

                        $.notify(responseData.Message, responseData.IsSuccess ? "success" : "error");

                        updatedData.isEditMode = !responseData.IsSuccess;

                    } catch (error) {
                        console.log(error)
                        this.loading = false;
                    }
                },

                //delete data
                async deleteData(id) {
                    this.loading = true;

                    try {
                        const options = { method: 'DELETE' }

                        const response = await fetch(`/Account/DeleteAccount/${id}`, options);
                        const responseData = await response.json();

                        if (responseData.IsSuccess)
                            this.data = this.data.filter(item => item.AccountId !== id);

                        $.notify(responseData.Message, responseData.IsSuccess ? "success" : "error");

                        this.loading = false;

                    } catch (error) {
                        console.log(error)
                        this.loading = false;
                    }
                }
            }
        }
    </script>
}