@{
    ViewData["Title"] = "Expense";
    Layout = "_AdminLayout";
    var isAdmin = User.IsInRole("Admin");
}


<div x-data="initData()" class="mx-3">
    <h1 class="page-header my-3">Expense</h1>

    <form x-on:submit.prevent="insertData()">
        <div class="row">
            <div class="col-sm-6 col-lg-4">
                <div class="form-group">
                    <label>Category</label>
                    <select x-model.number="formData.ExpenseCategoryId" class="form-control" required>
                        <option value="">[ SELECT ]</option>
                        <template x-for="category in categories" :key="category.value">
                            <option :value="category.value" x-text="category.label"></option>
                        </template>
                    </select>
                </div>
            </div>
            <div class="col-sm-6 col-lg-4">
                <div class="form-group">
                    <label>Expense Amount</label>
                    <input x-model="formData.ExpenseAmount" type="number" class="form-control" required>
                </div>
            </div>
            <div class="col-sm-6 col-lg-4">
                <div class="form-group">
                    <label>Expense For</label>
                    <input x-model="formData.ExpenseFor" type="text" class="form-control" required>
                </div>
            </div>
            <div class="col-sm-6 col-lg-4">
                <div class="form-group">
                    <label>Payment Method</label>
                    <select x-model="formData.AccountId" class="form-control" required>
                        <option value="">[ SELECT ]</option>
                        <template x-for="account in accounts" :key="account.value">
                            <option :value="account.value" x-text="account.label"></option>
                        </template>
                    </select>
                </div>
            </div>
            <div class="col-sm-6 col-lg-4">
                <div class="form-group">
                    <label>Expense Date</label>
                    <input x-ref="datePicker" type="text" :value="moment().format('D MMMM, YYYY')" class="form-control datepicker" required>
                </div>
            </div>
            <div class="pt-4">
                <button :disabled="loading" type="submit" class="btn btn-md btn-custom-bg waves-effect waves-light">Create <i class="fas fa-check ml-1"></i></button>
            </div>
        </div>
    </form>

    <div class="card card-body mt-4">
        <table id="data-table" class="table table-sm">
            <thead>
                <tr>
                    <th>Expense Date</th>
                    <th>Expense For</th>
                    <th>Payment Method</th>
                    <th>Expense Amount</th>
                    <th>Delete</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        const isAdmin = '@isAdmin'
        $(function () {
            $('.datepicker').pickadate();

            dataTable.getData();
        });

        //data table
        const dataTable = {
            table: null,
            init: function () {
                dataTable.table = $("#data-table").DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: "/Expense/GetExpense",
                        type: "POST"
                    },
                    columns:
                        [
                            { data: "ExpenseDate", "render": function (data) { return moment(data).format('D, MMM YYYY') } },
                            { data: "ExpenseFor" },
                            { data: "AccountName" },
                            { data: "ExpenseAmount", "render": function (data) { return `${data}/-` } },
                            {
                                data: "ExpenseId", "render": function (data) {
                                    return `<a x-on:click="deleteData(${data})" style="color:#ff0000" class="fas fa-trash-alt"></a>`;
                                }
                            }
                        ],
                    columnDefs: [
                        { 'searchable': false, 'targets': [0, 3, 4] },
                        { 'sortable': false, "visible": isAdmin === "True", 'targets': [4] },
                        { 'className': "text-center", "targets": [4] },
                        { 'className': "text-right", "targets": [3] }
                    ]
                });
            },
            getData: function () {
                dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
            }
        }

        //alpine js code
        function initData() {
            return {
                loading: false,

                //bind dropdown list
                categories: JSON.parse('@Html.Raw(Json.Serialize(ViewBag.categoryDropdown))'),
                accounts: JSON.parse('@Html.Raw(Json.Serialize(ViewBag.accountDropdown))'),

                formData: {},

                //insert data
                insertData() {
                    this.loading = true;

                    const model = { ...this.formData, ExpenseDate: this.$refs.datePicker.value };

                    $.ajax({
                        type: "POST",
                        url: "/Expense/PostExpense",
                        data: model,
                        success: response => {
                            this.loading = false;

                            if (response.IsSuccess) {
                                this.formData = {};
                                dataTable.getData();
                            }

                            $.notify(response.Message, response.IsSuccess ? "success" : "error");
                        },
                        error: error => {
                            console.log(error);
                            this.loading = false;
                        }
                    });
                },

                //delete Data
                async deleteData(id) {
                    this.loading = true;

                    try {
                        const options = { method: 'DELETE' };

                        const response = await fetch(`/Expense/DeleteExpense/${id}`, options);
                        const responseData = await response.json();

                        if (responseData.IsSuccess) {
                            dataTable.getData();
                        }

                        $.notify(responseData.Message, responseData.IsSuccess ? "success" : "error");
                        this.loading = false;

                    } catch (error) {
                        console.log(error);
                        this.loading = false;
                    }
                }
            };
        }
    </script>
}